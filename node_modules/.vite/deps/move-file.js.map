{
  "version": 3,
  "sources": ["browser-external:node:process", "browser-external:node:path", "browser-external:node:fs", "../../move-file/index.js", "../../move-file/node_modules/path-exists/index.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"node:process\" has been externalized for browser compatibility. Cannot access \"node:process.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"node:path\" has been externalized for browser compatibility. Cannot access \"node:path.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"node:fs\" has been externalized for browser compatibility. Cannot access \"node:fs.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "import process from 'node:process';\nimport path from 'node:path';\nimport fs, {promises as fsP} from 'node:fs';\nimport {pathExists} from 'path-exists';\n\nconst resolvePath = (cwd, sourcePath, destinationPath) => {\n\tsourcePath = path.resolve(cwd, sourcePath);\n\tdestinationPath = path.resolve(cwd, destinationPath);\n\n\treturn {\n\t\tsourcePath,\n\t\tdestinationPath,\n\t};\n};\n\nconst validatePathsExist = (sourcePath, destinationPath, suffix = 'Path') => {\n\tif (!sourcePath || !destinationPath) {\n\t\tthrow new TypeError(`\\`source${suffix}\\` and \\`destination${suffix}\\` required`);\n\t}\n};\n\nconst validateSameDirectory = (source, destination) => {\n\tif (path.dirname(source) !== path.dirname(destination)) {\n\t\tthrow new Error('`source` and `destination` must be in the same directory');\n\t}\n};\n\nconst _moveFile = async (sourcePath, destinationPath, {overwrite = true, cwd = process.cwd(), directoryMode, validateDirectory = false} = {}) => {\n\tif (cwd) {\n\t\t({sourcePath, destinationPath} = resolvePath(cwd, sourcePath, destinationPath));\n\t}\n\n\tif (validateDirectory) {\n\t\tvalidateSameDirectory(sourcePath, destinationPath);\n\t}\n\n\tif (!overwrite && await pathExists(destinationPath)) {\n\t\tthrow new Error(`The destination file exists: ${destinationPath}`);\n\t}\n\n\tawait fsP.mkdir(path.dirname(destinationPath), {\n\t\trecursive: true,\n\t\tmode: directoryMode,\n\t});\n\n\ttry {\n\t\tawait fsP.rename(sourcePath, destinationPath);\n\t} catch (error) {\n\t\tif (error.code === 'EXDEV') {\n\t\t\tawait fsP.copyFile(sourcePath, destinationPath);\n\t\t\tawait fsP.unlink(sourcePath);\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n};\n\nconst _moveFileSync = (sourcePath, destinationPath, {overwrite = true, cwd = process.cwd(), directoryMode, validateDirectory = false} = {}) => {\n\tif (cwd) {\n\t\t({sourcePath, destinationPath} = resolvePath(cwd, sourcePath, destinationPath));\n\t}\n\n\tif (validateDirectory) {\n\t\tvalidateSameDirectory(sourcePath, destinationPath);\n\t}\n\n\tif (!overwrite && fs.existsSync(destinationPath)) {\n\t\tthrow new Error(`The destination file exists: ${destinationPath}`);\n\t}\n\n\tfs.mkdirSync(path.dirname(destinationPath), {\n\t\trecursive: true,\n\t\tmode: directoryMode,\n\t});\n\n\ttry {\n\t\tfs.renameSync(sourcePath, destinationPath);\n\t} catch (error) {\n\t\tif (error.code === 'EXDEV') {\n\t\t\tfs.copyFileSync(sourcePath, destinationPath);\n\t\t\tfs.unlinkSync(sourcePath);\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n};\n\nexport async function moveFile(sourcePath, destinationPath, options) {\n\tvalidatePathsExist(sourcePath, destinationPath);\n\treturn _moveFile(sourcePath, destinationPath, options);\n}\n\nexport function moveFileSync(sourcePath, destinationPath, options) {\n\tvalidatePathsExist(sourcePath, destinationPath);\n\treturn _moveFileSync(sourcePath, destinationPath, options);\n}\n\nexport async function renameFile(source, destination, options = {}) {\n\tvalidatePathsExist(source, destination, '');\n\treturn _moveFile(source, destination, {...options, validateDirectory: true});\n}\n\nexport function renameFileSync(source, destination, options = {}) {\n\tvalidatePathsExist(source, destination, '');\n\treturn _moveFileSync(source, destination, {...options, validateDirectory: true});\n}\n", "import fs, {promises as fsPromises} from 'node:fs';\n\nexport async function pathExists(path) {\n\ttry {\n\t\tawait fsPromises.access(path);\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n}\n\nexport function pathExistsSync(path) {\n\ttry {\n\t\tfs.accessSync(path);\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["import_node_fs", "path", "fsPromises", "path", "process", "fsP", "fs"]
}
